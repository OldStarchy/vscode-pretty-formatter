{
    "name": "pretty-format",
    "displayName": "Pretty Format",
    "description": "Pretty code formatter using Pretty Diff Beautify",
    "version": "0.0.1",
    "publisher": "mblode",
    "license": "MIT",
    "engines": {
        "vscode": "^1.33.0"
    },
    "homepage": "https://github.com/mblode/vscode-pretty-format",
    "bugs": {
        "url": "https://github.com/mblode/vscode-pretty-format/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/mblode/vscode-pretty-format.git"
    },
    "icon": "icon.png",
    "galleryBanner": {
        "color": "#ffe04b",
        "theme": "light"
    },
    "categories": [
        "Formatters",
        "Programming Languages",
        "Snippets",
        "Other"
    ],
    "keywords": [
        "php",
        "html",
        "javascript",
        "format",
        "beautify"
    ],
    "activationEvents": [
        "*"
    ],
    "main": "./out/extension.js",
    "scripts": {
        "vscode:prepublish": "yarn run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "postinstall": "node ./node_modules/vscode/bin/install",
        "test": "yarn run compile && node ./node_modules/vscode/bin/test"
    },
    "devDependencies": {
        "@types/mocha": "^2.2.42",
        "@types/node": "^10.12.21",
        "tslint": "^5.12.1",
        "typescript": "^3.3.1",
        "vscode": "^1.1.28"
    },
    "dependencies": {
        "prettydiff": "^100.3.1"
    },
    "contributes": {
        "configuration": {
            "type": "object",
            "title": "Pretty Format configuration",
            "properties": {
                "pretty-format.formatting": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to enable formatting."
                },
                "pretty-format.brace_line": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces."
                },
                "pretty-format.brace_padding": {
                    "type": "boolean",
                    "default": false,
                    "description": "Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings."
                },
                "pretty-format.brace_style": {
                    "type": "string",
                    "enum": [
                        "collapse",
                        "collapse-preserve-inline",
                        "expand",
                        "none"
                    ],
                    "default": "none",
                    "description": "Emulates JSBeautify's brace_style option using existing Pretty Diff options."
                },
                "pretty-format.braces": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line."
                },
                "pretty-format.comment_line": {
                    "type": "boolean",
                    "default": false,
                    "description": "If a blank new line should be forced above comments."
                },
                "pretty-format.comments": {
                    "type": "boolean",
                    "default": false,
                    "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code."
                },
                "pretty-format.compressed_css": {
                    "type": "boolean",
                    "default": false,
                    "description": "If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors."
                },
                "pretty-format.correct": {
                    "type": "boolean",
                    "default": false,
                    "description": "Automatically correct some sloppiness in code."
                },
                "pretty-format.cssInsertLines": {
                    "type": "boolean",
                    "default": false,
                    "description": "Inserts new line characters between every CSS code block."
                },
                "pretty-format.else_line": {
                    "type": "boolean",
                    "default": false,
                    "description": "If else_line is true then the keyword 'else' is forced onto a new line."
                },
                "pretty-format.end_comma": {
                    "type": "string",
                    "enum": [
                        "always",
                        "never",
                        "none"
                    ],
                    "default": false,
                    "description": "If there should be a trailing comma in arrays and objects. Value multiline only applies to modes beautify and diff."
                },
                "pretty-format.force_attribute": {
                    "type": "boolean",
                    "default": false,
                    "description": "If all markup attributes should be indented each onto their own line."
                },
                "pretty-format.force_indent": {
                    "type": "boolean",
                    "default": false,
                    "description": "Will force indentation upon all content and tags without regard for the creation of new text nodes."
                },
                "pretty-format.format_array": {
                    "type": "string",
                    "enum": [
                        "default",
                        "indent",
                        "inline"
                    ],
                    "default": "default",
                    "description": "Determines if all array indexes should be indented, never indented, or left to the default."
                },
                "pretty-format.format_object": {
                    "type": "string",
                    "enum": [
                        "default",
                        "indent",
                        "inline"
                    ],
                    "default": "default",
                    "description": "Determines if all object keys should be indented, never indented, or left to the default."
                },
                "pretty-format.function_name": {
                    "type": "boolean",
                    "default": false,
                    "description": "If a space should follow a JavaScript function name."
                },
                "pretty-format.indent_level": {
                    "type": "integer",
                    "default": 0,
                    "description": "How much indentation padding should be applied to beautification? This option is internally used for code that requires switching between libraries."
                },
                "pretty-format.indent_size": {
                    "type": "integer",
                    "default": 0,
                    "description": "The number of 'inchar' values to comprise a single indentation."
                },
                "pretty-format.method_chain": {
                    "type": "integer",
                    "default": 3,
                    "description": "When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken."
                },
                "pretty-format.never_flatten": {
                    "type": "boolean",
                    "default": false,
                    "description": "If destructured lists in script should never be flattend."
                },
                "pretty-format.new_line": {
                    "type": "boolean",
                    "default": false,
                    "description": "Insert an empty line at the end of output."
                },
                "pretty-format.no_case_indent": {
                    "type": "boolean",
                    "default": false,
                    "description": "If a case statement should receive the same indentation as the containing switch block."
                },
                "pretty-format.no_lead_zero": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether leading 0s in CSS values immediately preceeding a decimal should be removed or prevented."
                },
                "pretty-format.object_sort": {
                    "type": "boolean",
                    "default": false,
                    "description": "Sorts markup attributes and properties by key name in script and style."
                },
                "pretty-format.preserve": {
                    "type": "integer",
                    "default": 0,
                    "description": "The maximum number of consecutive empty lines to retain."
                },
                "pretty-format.preserve_comment": {
                    "type": "boolean",
                    "default": false,
                    "description": "Prevent comment reformatting due to option wrap."
                },
                "pretty-format.quote_convert": {
                    "type": "string",
                    "enum": [
                        "double",
                        "none",
                        "single"
                    ],
                    "default": "none",
                    "description": "If the quotes of script strings or markup attributes should be converted to single quotes or double quotes."
                },
                "pretty-format.space": {
                    "type": "boolean",
                    "default": true,
                    "description": "Inserts a space following the function keyword for anonymous functions."
                },
                "pretty-format.space_close": {
                    "type": "boolean",
                    "default": false,
                    "description": "Markup self-closing tags end will end with ' />' instead of '/>'."
                },
                "pretty-format.styleguide": {
                    "type": "string",
                    "enum": [
                        "airbnb",
                        "crockford",
                        "google",
                        "jquery",
                        "jslint",
                        "mediawiki",
                        "mrdoob",
                        "none",
                        "standard",
                        "yandex"
                    ],
                    "default": "none",
                    "description": "Markup self-closing tags end will end with ' />' instead of '/>'."
                },
                "pretty-format.tag_merge": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allows immediately adjacement start and end markup tags of the same name to be combined into a single self-closing tag."
                },
                "pretty-format.tag_sort": {
                    "type": "boolean",
                    "default": false,
                    "description": "Sort child items of each respective markup parent element."
                },
                "pretty-format.ternary_line": {
                    "type": "boolean",
                    "default": false,
                    "description": "If ternary operators in JavaScript ? and : should remain on the same line."
                },
                "pretty-format.unformatted": {
                    "type": "boolean",
                    "default": false,
                    "description": "If markup tags should have their insides preserved. This option is only available to markup and does not support child tokens that require a different lexer."
                },
                "pretty-format.variable_list": {
                    "type": "string",
                    "enum": [
                        "each",
                        "list",
                        "none"
                    ],
                    "default": "none",
                    "description": "If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated."
                },
                "pretty-format.vertical": {
                    "type": "boolean",
                    "default": false,
                    "description": "If lists of assignments and properties should be vertically aligned. This option is not used with the markup lexer."
                },
                "pretty-format.wrap": {
                    "type": "integer",
                    "default": 0,
                    "description": "Character width limit before applying word wrap. A 0 value disables this option. A negative value concatenates script strings."
                }
            }
        }
    }
}
